[{"title":"Registry","type":0,"sectionRef":"#","url":"api/Registry","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"api/Registry#properties","content":" "},{"title":"name​","type":1,"pageTitle":"Registry","url":"api/Registry#name","content":"&lt;/&gt; Registry.name: string  "},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"api/Registry#functions","content":" "},{"title":"lookup​","type":1,"pageTitle":"Registry","url":"api/Registry#lookup","content":"&lt;/&gt; Registry.lookup(path: string) → any? Paths directly to the index in the registry. and returns the first value it finds. If you include any in part of the path, the search will begin to look through all descendants from that point. Therefore, it is only recommended to use any as the second-to-last part of the path.  "},{"title":"search​","type":1,"pageTitle":"Registry","url":"api/Registry#search","content":"&lt;/&gt; Registry.search(path: string) → SearchResult Begins a SearchResult chain which you can use for more advanced indexing. See the SearchResult class for more information on what to do with this class.  "},{"title":"set​","type":1,"pageTitle":"Registry","url":"api/Registry#set","content":"&lt;/&gt; Registry.set( path: string, key: string | number, value: any ) → () In the directory of the specified path, set key equal to value so long as the registry is mutable. "},{"title":"Virtual Registry","type":0,"sectionRef":"#","url":"docs/virtualregistry","content":"Virtual Registry A powerful function of Registry is being able to convert Roblox instances and their descendants into registries that you can use search functionality on. This allows you to make much cleaner and more organized asset/data folders. Let's assume we have the following file structure in Roblox: We can use the following code to convert this into a registry, and easily retrieve the axe swing sound effect instance. local assets = Registry.buildVirtualRegistry(&quot;Assets&quot;, ReplicatedStorage.assets, true) local axeSwingSound = assets:lookup(&quot;sounds/axe/swing&quot;) print(axeSwingSound, axeSwingSound.ClassName) -- Expected output: swing Instance Copy","keywords":""},{"title":"RegistryModule","type":0,"sectionRef":"#","url":"api/RegistryModule","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#new","content":"&lt;/&gt; RegistryModule.new( name: string, initial: table, immutable: boolean? ) → Registry Creates a new registry. Please note that the initial table may be any table so long as it has numeric or string keys. If immutable is set to true, you will not be able to modify the registry.  "},{"title":"get​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#get","content":"&lt;/&gt; RegistryModule.get(name: string) → Registry?   "},{"title":"remove​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#remove","content":"&lt;/&gt; RegistryModule.remove(name: string) → ()   "},{"title":"buildVirtualRegistry​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#buildVirtualRegistry","content":"&lt;/&gt; RegistryModule.buildVirtualRegistry( name: string, instance: Instance , recursive: boolean? ) → Registry Builds a registry from an instance and its children. If recursive is set to true, it will include all of its descendants. Recursive is set to true by default.  "},{"title":"searchFrom​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#searchFrom","content":"&lt;/&gt; RegistryModule.searchFrom(directory: table) → SearchResult Creates a new search result from a given table instead of a path in a registry. This allows you to expose tables outside of the registry into the search result system. "},{"title":"Examples","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Simple Lookup​","type":1,"pageTitle":"Examples","url":"docs/intro#simple-lookup","content":"The following example uses a simple key/value dictionary for player data. The inventory is represented by itemName = quantity. In this case, we use the lookup function to get the quantity of logs in our inventory. local registry = Registry.new(&quot;PlayerData&quot;, { kyrethia = { money = 5; level = 3; xp = 2; inventory = { stoneAxe = 1, log = 34 } } }) local numLogs = registry:lookup(&quot;kyrethia/inventory/log&quot;) print(numLogs) -- Expected output: '34' Copy "},{"title":"Simple Search​","type":1,"pageTitle":"Examples","url":"docs/intro#simple-search","content":"This example uses a different format for the inventory. Instead of a key/value pair, the inventory is an array that contains tables of data for each item. Because it does not have an explicit key, we use the search function instead of lookup. We can then chain the search result by calling with, and supplying it a table that will loop over every element in the directory and compare it against the search index. Note that after chaining search results, you must call either get or getFirst to exhaust the search. local registry = Registry.new(&quot;PlayerData&quot;, { kyrethia = { money = 5; level = 3; xp = 2; inventory = { { name = &quot;stoneAxe&quot;, quantity = 1 }, { name = &quot;logs&quot;, quantity = 34 } } } }) local numLogs = registry:search(&quot;kyrethia/inventory&quot;):with({name = &quot;logs&quot;}):getFirst() print(numLogs) -- Expected output: '34' Copy "},{"title":"Advanced Search​","type":1,"pageTitle":"Examples","url":"docs/intro#advanced-search","content":"The last powerful search feature of Registry is the ability to implement your own custom search logic against certain elements. This is accomplished through using the forEach function, which will iterate over each element in the current search directory and allow you to implemenet a callback function against each element. For this example, we want to loop through the players inventory and only return the items that have a durability of 50 or higher. We first search for the players inventory, then loop over each item. We can call searchFromDirectory on each item to force a search through the items data without having to path to it directly. If we find that an item has metadata with durability, we will check if it is lower than 50 and exclude the item if so. If the item does not have metadata or durability, we will also exclude it. Any items that are left untouched will remain in the search result. local registry = Registry.new(&quot;PlayerData&quot;, { kyrethia = { money = 5; level = 3; xp = 2; inventory = { { name = &quot;stoneAxe&quot;, quantity = 1, metadata = { durability = 35 } }, { name = &quot;stonePickaxe&quot;, quantity = 1, metadata = { durability = 78 } }, { name = &quot;stoneSword&quot;, quantity = 1, metadata = { durability = 64 } }, { name = &quot;logs&quot;, quantity = 34 } } } }) local function checkDurability(key, itemData, exclude) local durability = itemData.metadata.durability if durability then if durability &gt; 50 then return; end end -- if we cannot verify the value as what we want, exclude it exclude() end local itemsOverHalfDurability = registry:search(&quot;kyrethia/inventory&quot;) :with({&quot;metaData&quot;}) :forEach(checkDurability) :get() for _, item in pairs(itemsOverHalfDurability) do print(item.name) end --[[ Expected output: stonePickaxe stoneSword ]] Copy "},{"title":"SearchResult","type":0,"sectionRef":"#","url":"api/SearchResult","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#types","content":" "},{"title":"SearchIndex​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#SearchIndex","content":"&lt;/&gt; type SearchIndex = {[string | number]: any} | {string | number} A search index can be an array or a dictionary. If it is an array, it will only check if the element being searched has each key. If it is a dictionary, it will check if the element has both the key and if the key is equal to the value. "},{"title":"Functions​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#functions","content":" "},{"title":"with​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#with","content":"&lt;/&gt; SearchResult.with(searchIndex: SearchIndex) → SearchResult Checks each element within the current search directory against SearchIndex. See the SearchIndex type for more information.  "},{"title":"forEach​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#forEach","content":"&lt;/&gt; SearchResult.forEach(callback: ( key: string | number, value: any, exclude: () → () ) → ()) → SearchResult Loops over the current search directory and runs the given callback on every element. This is especially useful for implementing your own logic (ex. checking if a value is greater than or less than a certain value.). The callback function is supplied with an exclude function. By default, calling forEach() will not alter the search results. Instead, the loop uses a blacklist that will keep all search results until you call exclude, which will remove the element from the results. See Examples for more practical usage.  "},{"title":"get​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#get","content":"&lt;/&gt; SearchResult.get() → {[string | number]: any}? Returns the current search directory. After calling this, the search result is exhausted and can no longer be chained. This will always return a table of all search results.  "},{"title":"getFirst​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#getFirst","content":"&lt;/&gt; SearchResult.getFirst() → any? Returns the current search directory. After calling this, the search result is exhausted and can no longer be chained. As opposed to :get(), this will always return only the first search result it finds. "}]