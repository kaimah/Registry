[{"title":"Registry","type":0,"sectionRef":"#","url":"api/Registry","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"api/Registry#properties","content":" "},{"title":"name​","type":1,"pageTitle":"Registry","url":"api/Registry#name","content":"&lt;/&gt; Registry.name: string  "},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"api/Registry#functions","content":" "},{"title":"lookup​","type":1,"pageTitle":"Registry","url":"api/Registry#lookup","content":"&lt;/&gt; Registry.lookup(path: string) → any? Paths directly to the index in the registry. and returns the first value it finds. If you include any in part of the path, the search will begin to look through all descendants from that point. Therefore, it is only recommended to use any as the second-to-last part of the path. local items = Registry.new(&quot;Items&quot;, { melee = { axes = { stoneAxe = { quantity = 1 } }, swords = { stoneSword = { quantity = 1 } } } }) -- will return the stoneAxe data, but stoneSword was also considered in the search process due to the `any` tag. local stoneAxeData = items:lookup(&quot;melee/any/stoneAxe&quot;)   "},{"title":"search​","type":1,"pageTitle":"Registry","url":"api/Registry#search","content":"&lt;/&gt; Registry.search(path: string) → SearchResult Begins a SearchResult chain which you can use for more advanced indexing. See the SearchResult class for more information on what to do with this class.  "},{"title":"set​","type":1,"pageTitle":"Registry","url":"api/Registry#set","content":"&lt;/&gt; Registry.set( path: string, key: string | number, value: any ) → () In the directory of the specified path, set key equal to value so long as the registry is mutable. "},{"title":"RegistryModule","type":0,"sectionRef":"#","url":"api/RegistryModule","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#new","content":"&lt;/&gt; RegistryModule.new( name: string, initial: table, immutable: boolean? ) → Registry Creates a new registry. Please note that the initial table may be any table so long as it has numeric or string keys. If immutable is set to true, you will not be able to modify the registry.  "},{"title":"get​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#get","content":"&lt;/&gt; RegistryModule.get(name: string) → Registry? Returns a registry given its name.  "},{"title":"buildVirtualRegistry​","type":1,"pageTitle":"RegistryModule","url":"api/RegistryModule#buildVirtualRegistry","content":"&lt;/&gt; RegistryModule.buildVirtualRegistry( name: string, instance: Instance , recursive: boolean? ) → Registry Builds a registry from an instance and its children. If recursive is set to true, it will include all of its descendants. "},{"title":"SearchResult","type":0,"sectionRef":"#","url":"api/SearchResult","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#types","content":" "},{"title":"SearchIndex​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#SearchIndex","content":"&lt;/&gt; type SearchIndex = {[string | number]: any} | {string | number} A search index can be an array or a dictionary. If it is an array, it will only check if the element being searched has each key. If it is a dictionary, it will check if the element has both the key and if the key is equal to the value. "},{"title":"Functions​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#functions","content":" "},{"title":"with​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#with","content":"&lt;/&gt; SearchResult.with(searchIndex: SearchIndex) → SearchResult Checks each element within the current search directory against SearchIndex. See the SearchIndex type for more information. local items = Registry.new(&quot;Items&quot;, { melee = { axes = { { name = &quot;stoneAxe&quot;, quantity = 1 } } } }) -- returns the data table for the stone axe local stoneAxeData = items:search(&quot;melee/axes&quot;):with({ name = &quot;stoneAxe&quot; }):get()   "},{"title":"forEach​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#forEach","content":"&lt;/&gt; SearchResult.forEach(callback: ( key: string | number, value: any ) → ()) → SearchResult Loops over the current search directory and runs the given callback on every element. This is especially useful for implementing your own logic (ex. checking if a value is greater than or less than a certain value.) In the future, this will support &quot;resolving&quot; an element and allowing you to continue the search chain with the elements you enacted logic upon. local items = Registry.new(&quot;Items&quot;, { melee = { axes = { { name = &quot;stoneAxe&quot;, durability = 40 }, { name = &quot;stoneAxe&quot;, durability = 60 } { name = &quot;stoneAxe&quot;, durability = 80 } } } }) -- returns the data table for the stone axe local stoneAxeData = items:search(&quot;melee/axes&quot;):forEach(function(i, axeData) if axeData.durability &gt; 50 then -- Run code on axes with above 50 durability end end)   "},{"title":"get​","type":1,"pageTitle":"SearchResult","url":"api/SearchResult#get","content":"&lt;/&gt; SearchResult.get() → {any}? Returns the current search directory. After calling this, the search result is exhausted and can no longer be chained. This will always return a table. "}]