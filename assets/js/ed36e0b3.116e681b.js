"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[394],{94265:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"","params":[{"name":"activeDirectory","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"SearchResult"}],"function_type":"static","private":true,"source":{"line":154,"path":"src/init.lua"}},{"name":"with","desc":"Checks each element within the current search directory against SearchIndex. See the SearchIndex type for more information.","params":[{"name":"searchIndex","desc":"","lua_type":"SearchIndex"}],"returns":[{"desc":"","lua_type":"SearchResult"}],"function_type":"static","source":{"line":171,"path":"src/init.lua"}},{"name":"is","desc":"","params":[{"name":"searchValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"SearchResult"}],"function_type":"static","ignore":true,"source":{"line":223,"path":"src/init.lua"}},{"name":"forEach","desc":"Loops over the current search directory and runs the given callback on every element. This is especially useful for implementing your own\\nlogic (ex. checking if a value is greater than or less than a certain value.).\\n\\nThe callback function is supplied with an `exclude` function. By default, calling forEach() will not alter the search results. Instead,\\nthe loop uses a blacklist that will keep all search results until you call `exclude`, which will remove the element from the results.\\nSee Examples for more practical usage.","params":[{"name":"callback","desc":"","lua_type":"(key: string | number, value: any, exclude: () -> ()) -> ()"}],"returns":[{"desc":"","lua_type":"SearchResult"}],"function_type":"static","source":{"line":256,"path":"src/init.lua"}},{"name":"get","desc":"Returns the current search directory. After calling this, the search result is exhausted and can no longer be chained. This will always return\\na table of all search results.","params":[],"returns":[{"desc":"","lua_type":"{[string | number]: any}?"}],"function_type":"static","source":{"line":282,"path":"src/init.lua"}},{"name":"getFirst","desc":"Returns the current search directory. After calling this, the search result is exhausted and can no longer be chained. As opposed to :get(),\\nthis will always return only the first search result it finds.","params":[],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"static","source":{"line":296,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"SearchIndex","desc":"A search index can be an array or a dictionary. If it is an array, it will only check if the element being searched has\\neach key. If it is a dictionary, it will check if the element has both the key and if the key is equal to the value.","lua_type":"{[string | number]: any} | {string | number}","source":{"line":61,"path":"src/init.lua"}}],"name":"SearchResult","desc":"A SearchResult can be chained with itself using a variety of functions for advanced indexing.","source":{"line":43,"path":"src/init.lua"}}')}}]);