"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{59881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={sidebar_position:1},s="Examples",c={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Examples",description:"For each of the following examples, we will use a registry containing player data. Each registry will remain consistent, but increase in",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/Registry/docs/intro",editUrl:"https://github.com/kairamah/Registry/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Virtual Registry",permalink:"/Registry/docs/virtualregistry"}},u=[{value:"Simple Lookup",id:"simple-lookup",children:[],level:3},{value:"Simple Search",id:"simple-search",children:[],level:3},{value:"Advanced Search",id:"advanced-search",children:[],level:3}],h={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("p",null,"For each of the following examples, we will use a registry containing player data. Each registry will remain consistent, but increase in\ncomplexity for every example."),(0,r.kt)("h3",{id:"simple-lookup"},"Simple Lookup"),(0,r.kt)("p",null,"The following example uses a simple key/value dictionary for player data. The inventory is represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"itemName = quantity"),". In this case,\nwe use the lookup function to get the quantity of logs in our inventory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local registry = Registry.new("PlayerData", {\n    kyrethia = {\n        money = 5;\n        level = 3;\n        xp = 2;\n\n        inventory = {\n            stoneAxe = 1,\n            log = 34\n        }\n    }\n})\n\nlocal numLogs = registry:lookup("kyrethia/inventory/log")\nprint(numLogs)\n\n-- Expected output: \'34\'\n')),(0,r.kt)("h3",{id:"simple-search"},"Simple Search"),(0,r.kt)("p",null,"This example uses a different format for the inventory. Instead of a key/value pair, the inventory is an array that contains tables of data\nfor each item. Because it does not have an explicit key, we use the search function instead of lookup."),(0,r.kt)("p",null,"We can then chain the search result by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"with"),", and supplying it a table that will loop over every element in the directory and compare it\nagainst the search index. Note that after chaining search results, you must call either ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"getFirst")," to exhaust the search."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local registry = Registry.new("PlayerData", {\n    kyrethia = {\n        money = 5;\n        level = 3;\n        xp = 2;\n\n        inventory = {\n            { name = "stoneAxe", quantity = 1 },\n            { name = "logs", quantity = 34 }\n        }\n    }\n})\n\nlocal numLogs = registry:search("kyrethia/inventory"):with({name = "logs"}):getFirst()\nprint(numLogs)\n\n-- Expected output: \'34\'\n')),(0,r.kt)("h3",{id:"advanced-search"},"Advanced Search"),(0,r.kt)("p",null,"The last powerful search feature of Registry is the ability to implement your own custom search logic against certain elements. This is\naccomplished through using the ",(0,r.kt)("inlineCode",{parentName:"p"},"forEach")," function, which will iterate over each element in the current search directory and allow you to\nimplemenet a callback function against each element."),(0,r.kt)("p",null,"For this example, we want to loop through the players inventory and only return the items that have a durability of 50 or higher."),(0,r.kt)("p",null,"We first search for the players inventory, then loop over each item. We can call ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFromDirectory")," on each item to force a search\nthrough the items data without having to path to it directly."),(0,r.kt)("p",null,"If we find that an item has metadata with durability, we will check if it is lower than 50 and exclude the item if so. If the item does not have\nmetadata or durability, we will also exclude it."),(0,r.kt)("p",null,"Any items that are left untouched will remain in the search result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local registry = Registry.new("PlayerData", {\n    kyrethia = {\n        money = 5;\n        level = 3;\n        xp = 2;\n\n        inventory = {\n            { name = "stoneAxe", quantity = 1, metadata = { durability = 35 } },\n            { name = "stonePickaxe", quantity = 1, metadata = { durability = 78 } },\n            { name = "stoneSword", quantity = 1, metadata = { durability = 64 } },\n\n            { name = "logs", quantity = 34 }\n        }\n    }\n})\n\nlocal function checkDurability(key, itemData, exclude)\n    local durability = itemData.metadata.durability\n    if durability then\n        if durability > 50 then\n            return;\n        end\n    end\n\n    -- if we cannot verify the value as what we want, exclude it\n    exclude()\nend\n\nlocal itemsOverHalfDurability = registry:search("kyrethia/inventory")\n    :with({"metaData"})\n    :forEach(checkDurability)\n    :get()\n\nfor _, item in pairs(itemsOverHalfDurability) do\n    print(item.name)\nend\n\n--[[\n    Expected output:\n    stonePickaxe\n    stoneSword\n]]\n')))}d.isMDXComponent=!0}}]);